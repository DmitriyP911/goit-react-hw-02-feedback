{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notice/Notification.jsx","components/Section/Section.jsx","components/App.jsx","index.js"],"names":["FeedbackOptions","changeFeedback","className","type","name","onClick","Statistic","state","countPositiveFeedbackPercentage","countTotalFeedback","good","neutral","bad","Notification","propTypes","notice","PropTypes","string","isRequired","Notofication","Section","title","children","App","target","setState","prevState","Math","round","this","Component","ReactDOM","render","document","getElementById"],"mappings":"2NAiBeA,EAdS,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,eACxB,OACI,yBAAKC,UAAU,WACX,4BAAQC,KAAK,SAASC,KAAK,OAAOC,QAASJ,GAA3C,QACA,4BAAQE,KAAK,SAASC,KAAK,UAAUC,QAASJ,GAA9C,WACA,4BAAQE,KAAK,SAASC,KAAK,MAAMC,QAASJ,GAA1C,SCkBGK,EAvBG,SAAC,GAAsE,IAAnEC,EAAkE,EAAlEA,MAAOC,EAA2D,EAA3DA,gCAAiCC,EAA0B,EAA1BA,mBAClDC,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,QAASC,EAAQL,EAARK,IACvB,OACI,wBAAIV,UAAU,QACV,wBAAIA,UAAU,YAAd,SAAgCQ,GAChC,wBAAIR,UAAU,YAAd,YAAmCS,GACnC,wBAAIT,UAAU,YAAd,QAA+BU,GAC/B,wBAAIV,UAAU,YAAd,UAAiCO,GACjC,wBAAIP,UAAU,YAAd,eAAsCM,EAAtC,O,gBCFZK,aAAaC,UAAY,CACrBC,OAAQC,IAAUC,OAAOC,YAGdC,MAVM,SAAC,GAAD,IAAIJ,EAAJ,EAAIA,OAAJ,OACjB,6BACI,4BAAKA,KCUEK,EAZC,SAAC,GAAD,IAAIC,EAAJ,EAAIA,MAAOC,EAAX,EAAWA,SAAX,OACZ,iCACI,4BAAKD,GACJC,ICAYC,E,4MAEjBhB,MAAQ,CACJG,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTX,eAAiB,YAAmB,IACxBG,EADuB,EAAdoB,OACTpB,KACR,EAAKqB,UAAU,SAAAC,GAAS,sBACnBtB,EAAOsB,EAAUtB,GAAQ,O,EAIlCK,mBAAqB,WAAO,IAAD,EACQ,EAAKF,MAA5BG,EADe,EACfA,KAAMC,EADS,EACTA,QACd,OAFuB,EACAC,IACVF,EAAOC,G,EAGxBH,gCAAkC,kBAAMmB,KAAKC,MAAS,EAAKrB,MAAMG,KAAO,EAAKD,qBAAyB,M,uDAIlG,OACI,kBAAC,EAAD,CAASY,MAAM,yBACX,kBAAC,EAAD,CAAiBpB,eAAgB4B,KAAK5B,iBACrC4B,KAAKpB,qBACF,kBAAC,EAAD,CACIF,MAAOsB,KAAKtB,MACZC,gCAAiCqB,KAAKrB,kCACtCC,mBAAoBoB,KAAKpB,uBAGzB,kBAAC,EAAD,CAAcM,OAAO,sC,GAlCZe,aCFjCC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAT,U","file":"static/js/main.4171de42.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ( { changeFeedback } ) => {\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button type=\"button\" name=\"good\" onClick={changeFeedback}>Good</button>\r\n            <button type=\"button\" name=\"neutral\" onClick={changeFeedback}>Neutral</button>\r\n            <button type=\"button\" name=\"bad\" onClick={changeFeedback}>Bad</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    changeFeedback: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistic = ( { state, countPositiveFeedbackPercentage, countTotalFeedback } ) => {\r\n    const { good, neutral, bad } = state;\r\n    return (\r\n        <ul className=\"list\">\r\n            <li className=\"listItem\">Good: {good}</li>\r\n            <li className=\"listItem\">Neutral: {neutral}</li>\r\n            <li className=\"listItem\">Bad: {bad}</li>\r\n            <li className=\"listItem\">Total: {countTotalFeedback}</li>\r\n            <li className=\"listItem\">Percentage: {countPositiveFeedbackPercentage}%</li>\r\n        </ul >\r\n    )\r\n}\r\n\r\nStatistic.propTypes = {\r\n    state: PropTypes.shape( {\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n    } ),\r\n    countTotalFeedback: PropTypes.number.isRequired,\r\n    countPositiveFeedbackPercentage: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Statistic;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notofication = ( { notice } ) => (\r\n    <div>\r\n        <h2>{notice}</h2>\r\n    </div>\r\n)\r\n\r\nNotification.propTypes = {\r\n    notice: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Notofication;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ( { title, children } ) => (\r\n    <section>\r\n        <h1>{title}</h1>\r\n        {children}\r\n    </section>\r\n)\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Section;","import React, { Component } from 'react';\r\nimport FeedbackOptions from '../components/FeedbackOptions/FeedbackOptions';\r\nimport Statistic from './Statistics/Statistics';\r\nimport Notification from '../components/Notice/Notification';\r\nimport Section from './Section/Section';\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    }\r\n\r\n    changeFeedback = ( { target } ) => {\r\n        const { name } = target;\r\n        this.setState( prevState => ( {\r\n            [name]: prevState[name] + 1,\r\n        } ) )\r\n    }\r\n\r\n    countTotalFeedback = () => {\r\n        const { good, neutral, bad } = this.state;\r\n        return bad + good + neutral;\r\n    }\r\n\r\n    countPositiveFeedbackPercentage = () => Math.round( ( this.state.good / this.countTotalFeedback() ) * 100 );\r\n\r\n\r\n    render () {\r\n        return (\r\n            <Section title=\"Please leave feedback\">\r\n                <FeedbackOptions changeFeedback={this.changeFeedback} />\r\n                {this.countTotalFeedback() ? (\r\n                    <Statistic\r\n                        state={this.state}\r\n                        countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage()}\r\n                        countTotalFeedback={this.countTotalFeedback()}\r\n                    />\r\n                ) : (\r\n                        <Notification notice=\"We did not have any feedback\" />\r\n                    )\r\n                }\r\n            </Section>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render( <App />, document.getElementById( `root` ) )"],"sourceRoot":""}